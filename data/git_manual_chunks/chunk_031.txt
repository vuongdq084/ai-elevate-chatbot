:-) dirty A working tree is said to be "dirty" if it contains modifications which have not been committed to the current branch . evil merge An evil merge is a merge that introduces changes that do not appear in any parent . fast-forward A fast-forward is a special type of merge where you have a revision and you are "merging" another branch 's changes that happen to be a descendant of what you have. In such a case, you do not make a new merge commit but instead just update your branch to point at the same revision as the branch you are merging. This will happen frequently on a remote-tracking branch of a remote repository . fetch Fetching a branch means to get the branch’s head ref from a remote repository , to find out which objects are missing from the local object database , and to get them, too. See also git-fetch[1] . file system Linus Torvalds originally designed Git to be a user space file system, i.e. the infrastructure to hold files and directories. That ensured the efficiency and speed of Git. Git archive Synonym for repository (for arch people). gitfile A plain file .git at the root of a working tree that points at the directory that is the real repository. For proper use see git-worktree[1] or git-submodule[1] . For syntax see gitrepository-layout[5] . grafts Grafts enable two otherwise different lines of development to be joined together by recording fake ancestry information for commits. This way you can make Git pretend the set of parents a commit has is different from what was recorded when the commit was created. Configured via the .git/info/grafts file. Note that the grafts mechanism is outdated and can lead to problems transferring objects between repositories; see git-replace[1] for a more flexible and robust system to do the same thing. hash In Git’s context, synonym for object name . head A named reference to the commit at the tip of a branch . Heads are stored in a file in $GIT_DIR/refs/heads/ directory, except when using packed refs. (See git-pack-refs[1] .) HEAD The current branch . In more detail: Your working tree is normally derived from the state of the tree referred to by HEAD. HEAD is a reference to one of the heads in your repository, except when using a detached HEAD , in which case it directly references an arbitrary commit. head ref A synonym for head . hook During the normal execution of several Git commands, call-outs are made to optional scripts that allow a developer to add functionality or checking. Typically, the hooks allow for a command to be pre-verified and potentially aborted, and allow for a post-notification after the operation is done. The hook scripts are found in the $GIT_DIR/hooks/ directory, and are enabled by simply removing the .sample suffix from the filename. In earlier versions of Git you had to make them executable. index A collection of files with stat information, whose contents are stored as objects. The index is a stored version of your working tree . Truth be told, it can also contain a second, and even a third version of a working tree, which are used when merging . index entry The information regarding a particular file, stored in the index . An index entry can be unmerged, if a merge was started, but not yet finished (i.e. if the index contains multiple versions of that file). master The default development branch . Whenever you create a Git repository , a branch named "master" is created, and becomes the active branch. In most cases, this contains the local development, though that is purely by convention and is not required. merge As a verb: To bring the contents of another branch (possibly from an external repository ) into the current branch. In the case where the merged-in branch is from a different repository, this is done by first fetching the remote branch and then merging the result into the current branch. This combination of fetch and merge operations is called a pull . Merging is performed by an automatic process that identifies changes made since the branches diverged, and then applies all those changes together. In cases where changes conflict, manual intervention may be required to complete the merge. As a noun: unless it is a fast-forward , a successful merge results in the creation of a new commit representing the result of the merge, and having as parents the tips of the merged branches . This commit is referred to as a "merge commit", or sometimes just a "merge". object The unit of storage in Git. It is uniquely identified by the SHA-1 of its contents. Consequently, an object cannot be changed. object database Stores a set of "objects", and an individual object