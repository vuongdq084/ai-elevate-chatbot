Other consecutive asterisks are considered invalid. Glob magic is incompatible with literal magic. attr After attr: comes a space separated list of "attribute requirements", all of which must be met in order for the path to be considered a match; this is in addition to the usual non-magic pathspec pattern matching. See gitattributes[5] . Each of the attribute requirements for the path takes one of these forms: " ATTR " requires that the attribute ATTR be set. " -ATTR " requires that the attribute ATTR be unset. " ATTR=VALUE " requires that the attribute ATTR be set to the string VALUE . " !ATTR " requires that the attribute ATTR be unspecified. Note that when matching against a tree object, attributes are still obtained from working tree, not from the given tree object. exclude After a path matches any non-exclude pathspec, it will be run through all exclude pathspecs (magic signature: ! or its synonym ^ ). If it matches, the path is ignored. When there is no non-exclude pathspec, the exclusion is applied to the result set as if invoked without any pathspec. parent A commit object contains a (possibly empty) list of the logical predecessor(s) in the line of development, i.e. its parents. peel The action of recursively dereferencing a tag object . pickaxe The term pickaxe refers to an option to the diffcore routines that help select changes that add or delete a given text string. With the --pickaxe-all option, it can be used to view the full changeset that introduced or removed, say, a particular line of text. See git-diff[1] . plumbing Cute name for core Git . porcelain Cute name for programs and program suites depending on core Git , presenting a high level access to core Git. Porcelains expose more of a SCM interface than the plumbing . per-worktree ref Refs that are per- worktree , rather than global. This is presently only HEAD and any refs that start with refs/bisect/ , but might later include other unusual refs. pseudoref A ref that has different semantics than normal refs. These refs can be read via normal Git commands, but cannot be written to by commands like git-update-ref[1] . The following pseudorefs are known to Git: FETCH_HEAD is written by git-fetch[1] or git-pull[1] . It may refer to multiple object IDs. Each object ID is annotated with metadata indicating where it was fetched from and its fetch status. MERGE_HEAD is written by git-merge[1] when resolving merge conflicts. It contains all commit IDs which are being merged. pull Pulling a branch means to fetch it and merge it. See also git-pull[1] . push Pushing a branch means to get the branch’s head ref from a remote repository , find out if it is an ancestor to the branch’s local head ref, and in that case, putting all objects, which are reachable from the local head ref, and which are missing from the remote repository, into the remote object database , and updating the remote head ref. If the remote head is not an ancestor to the local head, the push fails. reachable All of the ancestors of a given commit are said to be "reachable" from that commit. More generally, one object is reachable from another if we can reach the one from the other by a chain that follows tags to whatever they tag, commits to their parents or trees, and trees to the trees or blobs that they contain. reachability bitmaps Reachability bitmaps store information about the reachability of a selected set of commits in a packfile, or a multi-pack index (MIDX), to speed up object search. The bitmaps are stored in a ".bitmap" file. A repository may have at most one bitmap file in use. The bitmap file may belong to either one pack, or the repository’s multi-pack index (if it exists). rebase To reapply a series of changes from a branch to a different base, and reset the head of that branch to the result. ref A name that points to an object name or another ref (the latter is called a symbolic ref ). For convenience, a ref can sometimes be abbreviated when used as an argument to a Git command; see gitrevisions[7] for details. Refs are stored in the repository . The ref namespace is hierarchical. Ref names must either start with refs/ or be located in the root of the hierarchy. For the latter, their name must follow these rules: The name consists of only upper-case characters or underscores. The name ends with " _HEAD " or is equal to " HEAD ". There are some irregular refs in the root of the hierarchy that do not match these rules. The following list is exhaustive and shall not be extended in the future: AUTO_MERGE BISECT_EXPECTED_REV NOTES_MERGE_PARTIAL NOTES_MERGE_REF MERGE_AUTOSTASH Different