we will use the word "branch" to mean a line of development, and "branch head" (or just "head") to mean a reference to the most recent commit on a branch. In the example above, the branch head named "A" is a pointer to one particular commit, but we refer to the line of three commits leading up to that point as all being part of "branch A". However, when no confusion will result, we often just use the term "branch" both for branches and for branch heads. Manipulating branches Creating, deleting, and modifying branches is quick and easy; here’s a summary of the commands: git branch list all branches. git branch <branch> create a new branch named <branch> , referencing the same point in history as the current branch. git branch <branch> <start-point> create a new branch named <branch> , referencing <start-point> , which may be specified any way you like, including using a branch name or a tag name. git branch -d <branch> delete the branch <branch> ; if the branch is not fully merged in its upstream branch or contained in the current branch, this command will fail with a warning. git branch -D <branch> delete the branch <branch> irrespective of its merged status. git switch <branch> make the current branch <branch> , updating the working directory to reflect the version referenced by <branch> . git switch -c <new> <start-point> create a new branch <new> referencing <start-point> , and check it out. The special symbol "HEAD" can always be used to refer to the current branch. In fact, Git uses a file named HEAD in the .git directory to remember which branch is current: $ cat .git/HEAD ref: refs/heads/master Examining an old version without creating a new branch The git switch command normally expects a branch head, but will also accept an arbitrary commit when invoked with --detach; for example, you can check out the commit referenced by a tag: $ git switch --detach v2.6.17 Note: checking out 'v2.6.17'. You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another switch. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -c with the switch command again. Example: git switch -c new_branch_name HEAD is now at 427abfa Linux v2.6.17 The HEAD then refers to the SHA-1 of the commit instead of to a branch, and git branch shows that you are no longer on a branch: $ cat .git/HEAD 427abfa28afedffadfca9dd8b067eb6d36bac53f $ git branch * (detached from v2.6.17) master In this case we say that the HEAD is "detached". This is an easy way to check out a particular version without having to make up a name for the new branch. You can still create a new branch (or tag) for this version later if you decide to. Examining branches from a remote repository The "master" branch that was created at the time you cloned is a copy of the HEAD in the repository that you cloned from. That repository may also have had other branches, though, and your local repository keeps branches which track each of those remote branches, called remote-tracking branches, which you can view using the -r option to git-branch[1] : $ git branch -r origin/HEAD origin/html origin/maint origin/man origin/master origin/next origin/seen origin/todo In this example, "origin" is called a remote repository, or "remote" for short. The branches of this repository are called "remote branches" from our point of view. The remote-tracking branches listed above were created based on the remote branches at clone time and will be updated by git fetch (hence git pull ) and git push . See Updating a repository with git fetch for details. You might want to build on one of these remote-tracking branches on a branch of your own, just as you would for a tag: $ git switch -c my-todo-copy origin/todo You can also check out origin/todo directly to examine it or write a one-off patch. See detached head . Note that the name "origin" is just the name that Git uses by default to refer to the repository that you cloned from. Naming branches, tags, and other references Branches, remote-tracking branches, and tags are all references to commits. All references are named with a slash-separated path name starting with refs ; the names we’ve been using so far are actually shorthand: The branch test is short for refs/heads/test . The tag v2.6.18 is short for refs/tags/v2.6.18 . origin/master is short for refs/remotes/origin/master . The full name is occasionally useful if, for example, there ever exists a tag and a branch with the same name. (Newly created refs are actually stored in the