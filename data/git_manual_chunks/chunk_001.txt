English ▾ Localized versions of user-manual manual English Want to read in your language or fix typos? You can help translate this page . Topics ▾ Setup and Config git config help bugreport Credential helpers Getting and Creating Projects init clone Basic Snapshotting add status diff commit notes restore reset rm mv Branching and Merging branch checkout switch merge mergetool log stash tag worktree Sharing and Updating Projects fetch pull push remote submodule Inspection and Comparison show log diff difftool range-diff shortlog describe Patching apply cherry-pick diff rebase revert Debugging bisect blame grep Email am apply imap-send format-patch send-email request-pull External Systems svn fast-import Server Admin daemon update-server-info Guides gitattributes Command-line interface conventions Everyday Git Frequently Asked Questions (FAQ) Glossary Hooks gitignore gitmodules Revisions Submodules Tutorial Workflows All guides... Administration clean gc fsck reflog filter-branch instaweb archive bundle Plumbing Commands cat-file check-ignore checkout-index commit-tree count-objects diff-index for-each-ref hash-object ls-files ls-tree merge-base read-tree rev-list rev-parse show-ref symbolic-ref update-index update-ref verify-pack write-tree Latest version ▾ user-manual last updated in 2.48.0 Changes in the user-manual manual 2.48.1 → 2.50.1 no changes 2.48.0 2025-01-10 2.46.1 → 2.47.3 no changes 2.46.0 2024-07-29 2.45.1 → 2.45.4 no changes 2.45.0 2024-04-29 2.44.1 → 2.44.4 no changes 2.44.0 2024-02-23 2.43.2 → 2.43.7 no changes 2.43.1 2024-02-09 2.43.0 2023-11-20 2.42.1 → 2.42.4 no changes 2.42.0 2023-08-21 2.39.1 → 2.41.3 no changes 2.39.0 2022-12-12 2.38.1 → 2.38.5 no changes 2.38.0 2022-10-02 2.36.1 → 2.37.7 no changes 2.36.0 2022-04-18 2.34.1 → 2.35.8 no changes 2.34.0 2021-11-15 2.33.1 → 2.33.8 no changes 2.33.0 2021-08-16 2.32.1 → 2.32.7 no changes 2.32.0 2021-06-06 2.30.1 → 2.31.8 no changes 2.30.0 2020-12-27 2.28.1 → 2.29.3 no changes 2.28.0 2020-07-27 2.25.1 → 2.27.1 no changes 2.25.0 2020-01-13 2.24.1 → 2.24.4 no changes 2.24.0 2019-11-04 2.23.1 → 2.23.4 no changes 2.23.0 2019-08-16 2.22.1 → 2.22.5 no changes 2.22.0 2019-06-07 2.21.1 → 2.21.4 no changes 2.21.0 2019-02-24 2.19.1 → 2.20.5 no changes 2.19.0 2018-09-10 2.18.1 → 2.18.5 no changes 2.18.0 2018-06-21 2.17.0 → 2.17.6 no changes 2.16.6 2019-12-06 2.15.4 2019-12-06 2.14.6 2019-12-06 2.13.7 2018-05-22 2.12.5 2017-09-22 2.9.5 → 2.11.4 no changes 2.8.6 2017-07-30 2.7.6 2017-07-30 2.6.7 2017-05-05 2.5.6 no changes 2.4.12 2017-05-05 2.3.10 no changes 2.2.3 2015-09-04 2.1.4 2014-12-17 2.0.5 2014-12-17 Check your version of git by running git --version Introduction Git is a fast distributed revision control system. This manual is designed to be readable by someone with basic UNIX command-line skills, but no previous knowledge of Git. Repositories and Branches and Exploring Git history explain how to fetch and study a project using git—​read these chapters to learn how to build and test a particular version of a software project, search for regressions, and so on. People needing to do actual development will also want to read Developing with Git and Sharing development with others . Further chapters cover more specialized topics. Comprehensive reference documentation is available through the man pages, or git-help[1] command. For example, for the command git clone <repo> , you can either use: $ man git-clone or: $ git help clone With the latter, you can use the manual viewer of your choice; see git-help[1] for more information. See also Git Quick Reference for a brief overview of Git commands, without any explanation. Finally, see Notes and todo list for this manual for ways that you can help make this manual more complete. Repositories and Branches How to get a Git repository It will be useful to have a Git repository to experiment with as you read this manual. The best way to get one is by using the git-clone[1] command to download a copy of an existing repository. If you don’t already have a project in mind, here are some interesting examples: # Git itself (approx. 40MB download): $ git clone git://git.kernel.org/pub/scm/git/git.git # the Linux kernel (approx. 640MB download): $ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git The initial clone may be time-consuming for a large project, but you will only need to clone once. The clone command creates a new directory named after the project ( git or linux in the examples above). After you cd into this directory, you will see that it contains a copy of the project files, called the working tree , together with a special top-level directory named .git , which contains all the information about the history of the project. How to check out a different version of a project Git is best thought of as a tool for storing the history of a collection of files. It stores the history as a compressed collection of interrelated snapshots of the project’s contents. In Git each such version is called a commit . Those snapshots aren’t necessarily all arranged in a single line from oldest to newest; instead, work may simultaneously proceed along parallel lines of development, called branches , which may merge and diverge. A single Git repository can