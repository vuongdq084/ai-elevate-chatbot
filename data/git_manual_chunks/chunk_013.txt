periodically "push" changes from your personal repository into your public repository, allowing other developers to pull from that repository. So the flow of changes, in a situation where there is one other developer with a public repository, looks like this: you push your personal repo ------------------> your public repo ^ | | | | you pull | they pull | | | | | they push V their public repo <------------------- their repo We explain how to do this in the following sections. Setting up a public repository Assume your personal repository is in the directory ~/proj . We first create a new clone of the repository and tell git daemon that it is meant to be public: $ git clone --bare ~/proj proj.git $ touch proj.git/git-daemon-export-ok The resulting directory proj.git contains a "bare" git repository—​it is just the contents of the .git directory, without any files checked out around it. Next, copy proj.git to the server where you plan to host the public repository. You can use scp, rsync, or whatever is most convenient. Exporting a Git repository via the Git protocol This is the preferred method. If someone else administers the server, they should tell you what directory to put the repository in, and what git:// URL it will appear at. You can then skip to the section " Pushing changes to a public repository ", below. Otherwise, all you need to do is start git-daemon[1] ; it will listen on port 9418. By default, it will allow access to any directory that looks like a Git directory and contains the magic file git-daemon-export-ok. Passing some directory paths as git daemon arguments will further restrict the exports to those paths. You can also run git daemon as an inetd service; see the git-daemon[1] man page for details. (See especially the examples section.) Exporting a git repository via HTTP The Git protocol gives better performance and reliability, but on a host with a web server set up, HTTP exports may be simpler to set up. All you need to do is place the newly created bare Git repository in a directory that is exported by the web server, and make some adjustments to give web clients some extra information they need: $ mv proj.git /home/you/public_html/proj.git $ cd proj.git $ git --bare update-server-info $ mv hooks/post-update.sample hooks/post-update (For an explanation of the last two lines, see git-update-server-info[1] and githooks[5] .) Advertise the URL of proj.git . Anybody else should then be able to clone or pull from that URL, for example with a command line like: $ git clone http://yourserver.com/~you/proj.git (See also setup-git-server-over-http for a slightly more sophisticated setup using WebDAV which also allows pushing over HTTP.) Pushing changes to a public repository Note that the two techniques outlined above (exporting via http or git ) allow other maintainers to fetch your latest changes, but they do not allow write access, which you will need to update the public repository with the latest changes created in your private repository. The simplest way to do this is using git-push[1] and ssh; to update the remote branch named master with the latest state of your branch named master , run $ git push ssh://yourserver.com/~you/proj.git master:master or just $ git push ssh://yourserver.com/~you/proj.git master As with git fetch , git push will complain if this does not result in a fast-forward ; see the following section for details on handling this case. Note that the target of a push is normally a bare repository. You can also push to a repository that has a checked-out working tree, but a push to update the currently checked-out branch is denied by default to prevent confusion. See the description of the receive.denyCurrentBranch option in git-config[1] for details. As with git fetch , you may also set up configuration options to save typing; so, for example: $ git remote add public-repo ssh://yourserver.com/~you/proj.git adds the following to .git/config : [remote "public-repo"] url = yourserver.com:proj.git fetch = +refs/heads/*:refs/remotes/example/* which lets you do the same push with just $ git push public-repo master See the explanations of the remote. <name> .url , branch. <name> .remote , and remote. <name> .push options in git-config[1] for details. What to do when a push fails If a push would not result in a fast-forward of the remote branch, then it will fail with an error like: ! [rejected] master -> master (non-fast-forward) error: failed to push some refs to '...' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. This can happen, for example, if you: use git reset --hard to remove already-published commits, or use git commit --amend to replace already-published