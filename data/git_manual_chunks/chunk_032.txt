is identified by its object name . The objects usually live in $GIT_DIR/objects/ . object identifier (oid) Synonym for object name . object name The unique identifier of an object . The object name is usually represented by a 40 character hexadecimal string. Also colloquially called SHA-1 . object type One of the identifiers " commit ", " tree ", " tag " or " blob " describing the type of an object . octopus To merge more than two branches . orphan The act of getting on a branch that does not exist yet (i.e., an unborn branch). After such an operation, the commit first created becomes a commit without a parent, starting a new history. origin The default upstream repository . Most projects have at least one upstream project which they track. By default origin is used for that purpose. New upstream updates will be fetched into remote-tracking branches named origin/name-of-upstream-branch, which you can see using git branch -r . overlay Only update and add files to the working directory, but donâ€™t delete them, similar to how cp -R would update the contents in the destination directory. This is the default mode in a checkout when checking out files from the index or a tree-ish . In contrast, no-overlay mode also deletes tracked files not present in the source, similar to rsync --delete . pack A set of objects which have been compressed into one file (to save space or to transmit them efficiently). pack index The list of identifiers, and other information, of the objects in a pack , to assist in efficiently accessing the contents of a pack. pathspec Pattern used to limit paths in Git commands. Pathspecs are used on the command line of "git ls-files", "git ls-tree", "git add", "git grep", "git diff", "git checkout", and many other commands to limit the scope of operations to some subset of the tree or working tree. See the documentation of each command for whether paths are relative to the current directory or toplevel. The pathspec syntax is as follows: any path matches itself the pathspec up to the last slash represents a directory prefix. The scope of that pathspec is limited to that subtree. the rest of the pathspec is a pattern for the remainder of the pathname. Paths relative to the directory prefix will be matched against that pattern using fnmatch(3); in particular, * and ? can match directory separators. For example, Documentation/*.jpg will match all .jpg files in the Documentation subtree, including Documentation/chapter_1/figure_1.jpg. A pathspec that begins with a colon : has special meaning. In the short form, the leading colon : is followed by zero or more "magic signature" letters (which optionally is terminated by another colon : ), and the remainder is the pattern to match against the path. The "magic signature" consists of ASCII symbols that are neither alphanumeric, glob, regex special characters nor colon. The optional colon that terminates the "magic signature" can be omitted if the pattern begins with a character that does not belong to "magic signature" symbol set and is not a colon. In the long form, the leading colon : is followed by an open parenthesis ( , a comma-separated list of zero or more "magic words", and a close parentheses ) , and the remainder is the pattern to match against the path. A pathspec with only a colon means "there is no pathspec". This form should not be combined with other pathspec. top The magic word top (magic signature: / ) makes the pattern match from the root of the working tree, even when you are running the command from inside a subdirectory. literal Wildcards in the pattern such as * or ? are treated as literal characters. icase Case insensitive match. glob Git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not match a / in the pathname. For example, "Documentation/*.html" matches "Documentation/git.html" but not "Documentation/ppc/ppc.html" or "tools/perf/Documentation/perf.html". Two consecutive asterisks (" ** ") in patterns matched against full pathname may have special meaning: A leading " ** " followed by a slash means match in all directories. For example, " **/foo " matches file or directory " foo " anywhere, the same as pattern " foo ". " **/foo/bar " matches file or directory " bar " anywhere that is directly under directory " foo ". A trailing " /** " matches everything inside. For example, " abc/** " matches all files inside directory "abc", relative to the location of the .gitignore file, with infinite depth. A slash followed by two consecutive asterisks then a slash matches zero or more directories. For example, " a/**/b " matches " a/b ", " a/x/b ", " a/x/y/b " and so on.