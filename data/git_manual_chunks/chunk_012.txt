, and how to merge two branches. So you can merge in changes from the original repository’s master branch with: $ git fetch $ git merge origin/master However, the git-pull[1] command provides a way to do this in one step: $ git pull origin master In fact, if you have master checked out, then this branch has been configured by git clone to get changes from the HEAD branch of the origin repository. So often you can accomplish the above with just a simple $ git pull This command will fetch changes from the remote branches to your remote-tracking branches origin/* , and merge the default branch into the current branch. More generally, a branch that is created from a remote-tracking branch will pull by default from that branch. See the descriptions of the branch. <name> .remote and branch. <name> .merge options in git-config[1] , and the discussion of the --track option in git-checkout[1] , to learn how to control these defaults. In addition to saving you keystrokes, git pull also helps you by producing a default commit message documenting the branch and repository that you pulled from. (But note that no such commit will be created in the case of a fast-forward ; instead, your branch will just be updated to point to the latest commit from the upstream branch.) The git pull command can also be given . as the "remote" repository, in which case it just merges in a branch from the current repository; so the commands $ git pull . branch $ git merge branch are roughly equivalent. Submitting patches to a project If you just have a few changes, the simplest way to submit them may just be to send them as patches in email: First, use git-format-patch[1] ; for example: $ git format-patch origin will produce a numbered series of files in the current directory, one for each patch in the current branch but not in origin/HEAD . git format-patch can include an initial "cover letter". You can insert commentary on individual patches after the three dash line which format-patch places after the commit message but before the patch itself. If you use git notes to track your cover letter material, git format-patch --notes will include the commit’s notes in a similar manner. You can then import these into your mail client and send them by hand. However, if you have a lot to send at once, you may prefer to use the git-send-email[1] script to automate the process. Consult the mailing list for your project first to determine their requirements for submitting patches. Importing patches to a project Git also provides a tool called git-am[1] (am stands for "apply mailbox"), for importing such an emailed series of patches. Just save all of the patch-containing messages, in order, into a single mailbox file, say patches.mbox , then run $ git am -3 patches.mbox Git will apply each patch in order; if any conflicts are found, it will stop, and you can fix the conflicts as described in " Resolving a merge ". (The -3 option tells Git to perform a merge; if you would prefer it just to abort and leave your tree and index untouched, you may omit that option.) Once the index is updated with the results of the conflict resolution, instead of creating a new commit, just run $ git am --continue and Git will create the commit for you and continue applying the remaining patches from the mailbox. The final result will be a series of commits, one for each patch in the original mailbox, with authorship and commit log message each taken from the message containing each patch. Public Git repositories Another way to submit changes to a project is to tell the maintainer of that project to pull the changes from your repository using git-pull[1] . In the section " Getting updates with git pull " we described this as a way to get updates from the "main" repository, but it works just as well in the other direction. If you and the maintainer both have accounts on the same machine, then you can just pull changes from each other’s repositories directly; commands that accept repository URLs as arguments will also accept a local directory name: $ git clone /path/to/repository $ git pull /path/to/other/repository or an ssh URL: $ git clone ssh://yourhost/~you/repository For projects with few developers, or for synchronizing a few private repositories, this may be all you need. However, the more common way to do this is to maintain a separate public repository (usually on a different host) for others to pull changes from. This is usually more convenient, and allows you to cleanly separate private work in progress from publicly visible work. You will continue to do your day-to-day work in your personal repository, but